name: "Deploy macOS to TestFlight/App Store"
description: "Sign .app, build .pkg, and upload to App Store Connect using iTMSTransporter"

inputs:
  artifact-name:
    description: "Name of the artifact to download (e.g., macOS)"
    required: true
  game-name:
    description: "Name of the .app/.pkg (expects <game-name>.app)"
    required: true
  macos-package:
    description: "Bundle identifier used in entitlements (e.g., com.example.app)"
    required: true
  apple-team-id:
    description: "Apple Team ID for signing and entitlements replacement"
    required: true
  deploy-certificate-base64:
    description: "Base64 encoded deploy certificate (.p12)"
    required: true
  install-certificate-base64:
    description: "Base64 encoded install certificate (.p12)"
    required: true
  p12-password:
    description: "Password for both P12 files"
    required: true
  deploy-provisioning-profile-mac-base64:
    description: "Base64 encoded provisioning profile for macOS app"
    required: true
  keychain-password:
    description: "Temporary keychain password"
    required: true
  apple-id:
    description: "Apple ID (username) for App Store Connect"
    required: true
  app-specific-password:
    description: "App-specific password for the Apple ID"
    required: true
  itc-provider:
    description: "Optional provider short name if Apple ID has multiple teams"
    required: false
    default: ""

runs:
  using: "composite"
  steps:
    - uses: actions/checkout@v4
    
    # Copy deploy entitlements
    - uses: actions/checkout@v4
      with:
        repository: appsinacup/action_deploy_godot_game
        fetch-depth: 0
        path: deploy-godot-game
        
    - name: Copy deploy scripts
      shell: bash
      run: |
        mkdir -p deploy
        mkdir -p deploy/mac
        mv deploy-godot-game/deploy/mac/entitlements-deploy.plist deploy/mac/entitlements-deploy.plist

    - name: ðŸ“¥ Download Build Artifact
      uses: actions/download-artifact@v4
      with:
        name: ${{ inputs.artifact-name }}
        path: build

    # https://docs.github.com/en/actions/deployment/deploying-xcode-applications/installing-an-apple-certificate-on-macos-runners-for-xcode-development
    - name: Install the Apple certificate and provisioning profile
      shell: bash
      working-directory: build
      env:
        DEPLOY_CERTIFICATE_BASE64: ${{ inputs.deploy-certificate-base64 }}
        INSTALL_CERTIFICATE_BASE64: ${{ inputs.install-certificate-base64 }}
        P12_PASSWORD: ${{ inputs.p12-password }}
        DEPLOY_PROVISION_PROFILE_MAC_BASE64: ${{ inputs.deploy-provisioning-profile-mac-base64 }}
        KEYCHAIN_PASSWORD: ${{ inputs.keychain-password }}
        GAME_NAME: ${{ inputs.game-name }}
      run: |
        set -euo pipefail
        DEPLOY_CERTIFICATE_PATH=$RUNNER_TEMP/deploy_certificate.p12
        INSTALL_CERTIFICATE_PATH=$RUNNER_TEMP/install_certificate.p12
        PP_PATH=$RUNNER_TEMP/build_pp.provisionprofile
        KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db

        echo -n "$DEPLOY_CERTIFICATE_BASE64" | base64 --decode -o $DEPLOY_CERTIFICATE_PATH
        echo -n "$INSTALL_CERTIFICATE_BASE64" | base64 --decode -o $INSTALL_CERTIFICATE_PATH
        echo -n "$DEPLOY_PROVISION_PROFILE_MAC_BASE64" | base64 --decode -o $PP_PATH

        security create-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
        security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
        security unlock-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH

        security import $DEPLOY_CERTIFICATE_PATH -P "$P12_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
        security list-keychain -d user -s $KEYCHAIN_PATH
        SIGNING_IDENTITY=$(security find-identity -p basic -v | awk -F'"' 'NR==1 {print $2}')
        echo "DEPLOY_SIGNING_IDENTITY=$SIGNING_IDENTITY" >> $GITHUB_ENV
        IDENTITIES_BEFORE=$(security find-identity -p basic -v | awk -F'"' '{print $2}')

        security import $INSTALL_CERTIFICATE_PATH -P "$P12_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
        security list-keychain -d user -s $KEYCHAIN_PATH
        security find-identity -p basic -v
        IDENTITIES_AFTER=$(security find-identity -p basic -v | awk -F'"' '{print $2}')

        SECOND_SIGNING_IDENTITY=$(comm -13 <(echo "$IDENTITIES_BEFORE" | sort) <(echo "$IDENTITIES_AFTER" | sort) | head -n 1)
        
        # Export to GitHub Actions environment
        echo "INSTALL_SIGNING_IDENTITY=$SECOND_SIGNING_IDENTITY" >> $GITHUB_ENV
        security list-keychain -d user -s $KEYCHAIN_PATH

        # apply provisioning profile
        cp $PP_PATH $GAME_NAME.app/Contents/embedded.provisionprofile

    - name: Code Sign
      shell: bash
      working-directory: build
      env:
        GAME_NAME: ${{ inputs.game-name }}
      run: |
        # Remove wrong attributes
        xattr -cr $GAME_NAME.app
        # Set permissions and sign the application
        chmod +x $GAME_NAME.app
        # Set permission and sign the binary
        chmod +x $GAME_NAME.app/Contents/MacOS/*
        # Replace APPLE_TEAM_ID
        sed -i '' "s/APPLE_TEAM_ID/${{ inputs.apple-team-id }}/g" ../deploy/mac/entitlements-deploy.plist
        # Replace IOS_APP_PACKAGE
        sed -i '' "s/IOS_APP_PACKAGE/${{ inputs.macos-package }}/g" ../deploy/mac/entitlements-deploy.plist
        
        # Sign ALL embedded frameworks first (if any exist)
        if [ -d "$GAME_NAME.app/Contents/Frameworks" ]; then
          find "$GAME_NAME.app/Contents/Frameworks" -name "*.framework" -type d | while read -r framework; do
            echo "Signing framework: $framework"
            codesign --force --options=runtime --verbose --timestamp \
              --sign "$DEPLOY_SIGNING_IDENTITY" \
              "$framework"
          done
        fi

        # Sign the main application
        codesign --force --deep --options=runtime --verbose --timestamp \
          --entitlements ../deploy/mac/entitlements-deploy.plist --sign "$DEPLOY_SIGNING_IDENTITY" \
          $GAME_NAME.app
          
    - name: Verify Signatures
      shell: bash
      working-directory: build
      env:
        GAME_NAME: ${{ inputs.game-name }}
      run: |
        # Check main app
        codesign -dv --verbose=4 "$GAME_NAME.app"

        # Check all frameworks (if any)
        if [ -d "$GAME_NAME.app/Contents/Frameworks" ]; then
          find "$GAME_NAME.app/Contents/Frameworks" -name "*.framework" -type d | while read -r framework; do
            echo "Verifying: $framework"
            codesign -dv --verbose=4 "$framework"
          done
        fi
        
    - name: Make installer
      shell: bash
      working-directory: build
      env:
        GAME_NAME: ${{ inputs.game-name }}
      run: |
        productbuild --sign "$INSTALL_SIGNING_IDENTITY" \
        --component $GAME_NAME.app /Applications $GAME_NAME.pkg
      
    - name: Publish the App on TestFlight
      shell: bash
      working-directory: build
      env:
        GAME_NAME: ${{ inputs.game-name }}
      run: |
        xcrun altool --upload-app --type osx --file $GAME_NAME.pkg \
        --username "${{ inputs.apple-id }}" --password "${{ inputs.app-specific-password }}" --verbose

    - name: List Files
      shell: bash
      run: |
        ls -la
        ls -la build
